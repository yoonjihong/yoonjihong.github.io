/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.
 */

// @ts-check

/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */
const sidebars = {
  // By default, Docusaurus generates a sidebar from the docs folder structure
  // tutorialSidebar: [{ type: 'autogenerated', dirName: '.' }],
  // But you can create a sidebar manually
  /*
  tutorialSidebar: [
    {
      type: 'category',
      label: 'Tutorial',
      items: ['hello'],
    },
  ],
   */
};

// import * as fs from 'fs';
// import path from 'path';

module.exports = sidebars;

// const getFilesOf = dir =>
//   fs
//     .readdirSync(dir)
//     .reduce(
//       (files, fileName) =>
//         fileName.includes('.') ? [...files, fileName] : files,
//       [],
//     )
//     .map(file => path.parse(file).name);
// // 디렉토리에 있는 디렉토리 목록을 반환함.
// const getDirectoriesOf = dir =>
//   fs
//     .readdirSync(dir)
//     .reduce(
//       (dirs, dirName) => (dirName.includes('.') ? dirs : [...dirs, dirName]),
//       [],
//     );
// // docs 디렉토리에 있는 카테고리
// const categories = getDirectoriesOf('docs');
// // 카테고리를 받아서 하위 카테고리의 목록을 반환하는 함수
// const getSubCategories = category => getDirectoriesOf(`docs/${category}`);
// // 서브 카테고리 파일들을 Docusaurus의 중첩된 사이드바로 구성
// const createSubCategoryItem = (category, subCategory) => ({
//   type: 'category',
//   label: SUB_CATEGORY_SLUGS[removePriority(subCategory)],
//   items: getFilesOf(`docs/${category}/${subCategory}`).map(
//     fileName => `${category}/${subCategory}/${fileName}`,
//   ),
// });
// // 카테고리 별로 서브 카테고리의 중첩된 사이드바를 구성
// module.exports = categories.reduce(
//   (sidebars, category) => ({
//     ...sidebars,
//     [category]: getSubCategories(category).map(subCategory =>
//       createSubCategoryItem(category, subCategory),
//     ),
//   }),
//   {},
// );
