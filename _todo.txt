노마드코더, 코딩애플, 드림코딩, 조코딩(애매함), 김버그


명령형 프로그래밍, 선언형 프로그래밍


css
https://blinders.tistory.com/93
reflow, repainting(redraw?) - https://velog.io/@young_pallete/Reflow-Repaint%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90
속성별로 reflow, repating
렌더 트리에 포함되는지 안되는지



JavaScript 
0. 렌더링, 계산, querySelector사용시 노드 트리 계산
1. 브라우저(웹) api, js api(메소드?)
2. DOM이란
0. 클로저란 
0. 인자, 인수, 파람
1. 번들러의 이해 - https://medium.com/naver-place-dev/javascript-%EB%B2%88%EB%93%A4%EB%9F%AC%EC%9D%98-%EC%9D%B4%ED%95%B4-1-javascript-%EB%AA%A8%EB%93%88-d68c7e438fcd
3. 함수형 클래스형 차이점
4. scope, 호이스팅 등등
5. 웹 동작원리
6. 원시타입 참조(객체) 타입
7. es6,es5, spread??
8. https://sustainable-dev.tistory.com/156 -> 자바스크립트에서 불변성이란
9. immer 사용법 -> 리액트 불변성을 지켜야하는이유에 링크 걸기
10. 캐싱
11. 보일러 플레이트 코드란?
12. 자바스크립트 함수 동등성 - https://www.daleseo.com/react-hooks-use-callback/
13. abort로 http 요청 취소하기 https://blog.outsider.ne.kr/1602
14. var, let, const - https://evan-moon.github.io/2019/06/18/javascript-let-const/


React

now.

0. https://techblog.woowahan.com/8268/ - cli로 컴포넌트 생성하기
0. Virtual 돔이란, 리얼돔 버추얼돔이 동기화 되지 않았을 때 문제점
0. callbackRef
0. useContext, useReducer, useImperativeHandle, useLayoutEffect, useDebugValue
1. 상태 끌어올리기?
2. 커스텀 훅
3. 라이프사이클관리?(생명주기?), 리액트의 라이프 사이클
4. api -> swr, reactQuery
5. 렌더링 최적화 -> 
   <div className="App" ref={ref2}></div>
   <div className="App" ref={(v) => ref2(v)}></div> 두개의 차이점

6. Production모드로 배포, .env
7. CI/CD
8. 상태관리
   https://maeng2418.github.io/react/state_management/
   https://techblog.woowahan.com/8311/
9. Forwarding Refs
10. 렌더링 시 key 최적화
11. 리액트 자료구조란? -> 메모제이션 메모이제이션의 대표적인 예로는 동적계획법의 탑다운 방식이 있다.
12. 캐싱
13. https://ljtaek2.tistory.com/142 0. react18에서 리액트가 상태 처리하는 방식(배치?)
14. 빌드 환경과 개발환경의 차이점
15. 리액트 StrictMode https://jeonghwan-kim.github.io/2022/05/20/react-strict-mode -> 개발환경에서 해당 모드가 렌더링을 두번씩 하게함
16. 리액트 테스트 코드 https://maeng2418.github.io/react/react_testing_library/
17. 컴포넌트 분리의 중요성
18. 컴포넌트 - 검색어: react 컴포넌트 최적화 - https://velog.io/@shin6403/React-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%98%EB%8A%94-7%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95-Hooks-%EA%B8%B0%EC%A4%80
https://velog.io/@shin6403/React-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%84%B1%EB%8A%A5-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%98%EB%8A%94-7%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95-Hooks-%EA%B8%B0%EC%A4%80#%EC%95%88%EC%A2%8B%EC%9D%80-%EC%98%88%E2%99%82%EF%B8%8F


React - Recoil
1. https://tech.osci.kr/2022/07/05/recoil-react-js-state-management/



webpack
1. 빌드, 번들러, 번들, 과정




Typescript
1. interface vs type - https://yceffort.kr/2021/03/typescript-interface-vs-type




Nextjs
1. https://kyounghwan01.github.io/blog/React/next/mui-styled/#%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3-%E1%84%89%E1%85%A6%E1%84%90%E1%85%B5%E1%86%BC
2. nextjs \_document, \_app의 역할




Git
1. gitFlow vs Trunk-based




Flutter

1. 릴리즈 모드 실행
2. 보더 라디우스 사용법
3. getx패턴에 페이지 이동 안되는거(컨트롤러 바인딩된 페이지)
4. router 페이지 이동 방법 정리 - https://dev-yakuza.posstree.com/ko/flutter/getx/route/
5. https://jacobko.info/flutter/flutter-17/ Getx





기타
1. .vscode config
2. https://velog.io/@j1min/Vscode-Prettier-%EC%A0%81%EC%9A%A9-%EC%95%88%EB%90%A8-%EA%B3%A0%EC%B9%98%EB%8A%94%EB%B2%95
3. CS란?, 반복되는 CS
4. 지라
   https://spoqa.github.io/2022/06/15/how-to-use-jira-in-spoqa.html
5. 사이드프로젝트
   https://brunch.co.kr/@s0ojin/36

https://mugon-devlog.tistory.com/73
uri와 url의 차이점





네트워크
1. https, 보안 등등,
2. 네트워크 리퀘스트 - 단일/다중 리퀘스트 용량차이, http2.0(?) api 요청 개수 제한,




서버
1. 도커로 개발환경 세팅하기
2. 쿠버네틱스


shall
1. 쉘스크립트 파일 만드는법